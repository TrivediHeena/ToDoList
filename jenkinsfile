pipeline {
    agent any

    /*tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "M3"
    }*/

    stages {
        stage('Pull'){
            steps{
                script{
                    git branch: 'master',url: 'https://github.com/TrivediHeena/ToDoList.git'
                }
            }
        }
        stage('Build') {
            steps {
                script{
                // Get some code from a GitHub repository
                //git 'https://github.com/TrivediHeena/ToDoList.git'

                // Run Maven on a Unix agent.
                //sh "mvn -Dmaven.test.failure.ignore=true clean package"

                // To run Maven on a Windows agent, use
                bat "mvn -Dmaven.test.failure.ignore=true clean package"
                //bat 'mvn -DskipTests clean package'
                }
            }
              
        }
        stage('Unit Test'){
            steps{
                echo "Unit Testing"
                //with Unix sh is used
                //sh 'mvn test'
                
                //with windows
                bat 'mvn -o test'
            }
        }
        stage('Integration Test'){
            steps{
                echo "Integration Testing working..."
                bat 'mvn verify -DskipUnitTests'
                //sh 'mvn verify -DskipUnitTests'
            }
        }
        stage('Static Code Analysis'){
            environment {
                SCANNER_HOME = tool 'SonarQubeScanner'
            }
            steps{
                //echo 'analyzing...'
                //bat 'mvn sonar:sonar -Dsonar.projectKey=MyToDoList -Dsonar.host.url=http://localhost:9000 -Dsonar.login=c34579f3d44f4cfcceb0396763fea3fa45ed0647'
                withSonarQubeEnv('SonarQube') {
                    
                    bat 'mvn sonar:sonar -Dsonar.projectKey=MyToDoList -Dsonar.host.url=http://localhost:9000'// -Dsonar.login=c34579f3d44f4cfcceb0396763fea3fa45ed0647'
                     //bat 'mvn clean package sonar:sonar -DskipTests -Dsonar.projectKey=MyToDoList -Dsonar.sources=. -Dsonar.tests=. -Dsonar.test.exclusions=src/test/java/**'
                     //'${SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectKey=MyToDoList -Dsonar.exclusions=**/test/**'
                     //src/test/java/com/mytodo/demo/MyToDoListApplicationTests.java -Dsonar.test.inclusions=src/test/java/**
                  }
            }
        }
        stage('Quality Gate'){
            steps{
                waitForQualityGate abortPipeline: true, credentialsId: 'SonarQube'

            }
        }
        stage('Install'){
            steps{
                bat 'mvn clean install'
            }
        }
        
        stage('Upload Nexus Repo'){
            steps{
                script{
					nexusArtifactUploader artifacts: 
					[
						[
							artifactId: 'MyToDoList', 
							classifier: '', 
							file: 'target/MyToDoList-0.0.1-SNAPSHOT.jar', 
							type: 'jar'
						]
					], 
					credentialsId: 'nexus-auth', 
					groupId: 'com.mytodo', 
					nexusUrl: 'localhost:8081', 
					nexusVersion: 'nexus3', 
					protocol: 'http', 
					repository: 'MyToDoList', 
					version: '0.0.1-SNAPSHOT'
				}
            }
        }
		
		stage('Create Docker Image'){
			steps{
				script{
					bat 'docker image build -t $JOB_NAME:v1.$BUILD_ID'
					bat 'docker image tag $JOB_NAME:v1.$BUILD_ID htri1207/$JOB_NAME:v1.$BUILD_ID'
					bat 'docker image tag $JOB_NAME:v1.$BUILD_ID htri1207/$JOB_NAME:latest'
				}
			}
        }
    }
}
